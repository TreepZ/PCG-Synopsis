using System.Collections;
using System.Collections.Generic;
using UnityEngine;

//We are making it static and removing the Mono-reference as we are not attaching it to a gameobjcet, nor are we making multiple instances of it
public static class Noise
{
    ///TODO 1 - GenerateNoiseMap Explain

    //Mapwidth and height are self explanatory
    //Seed: Same values, different outcome. We essentially tell Perlin to look at a different part of the noise.
    //Scale: Stretches the result
    //Octaves: The number of noise functions that together form Perlin
    //Persistance: How fast the amplitude, our max height, decreases for each octave
    //Lacunarity: How fast the frequency, our amount of 'terrain features', grow for each octave
    //Offset: Moves the noise by an amount via either the x or y-axis
    public enum NormalizeMode { Local, Global };
    public static float[,] GenerateNoiseMap(int mapWidth, int mapHeight, int seed, float scale, int octaves, float persistance, float lacunarity, Vector2 offset, NormalizeMode normalizeMode)
    {
        //Noisemap with the size of our mapwidth and height(height on the z axis essentially)
        float[,] noiseMap = new float[mapWidth, mapHeight];
        //Assign the current iteration a random seed
        System.Random prng = new System.Random(seed);
        Vector2[] octaveOffsets = new Vector2[octaves];

        float maxPossibleHeight = 0;
        float amplitude = 1;
        float frequency = 1;
        //At the end of this loop, we will have found the maximum possible height-value.
        for (int i = 0; i < octaves; i++)
        {
            //We define this range, as it arounds the max and min that perlinnoise will take without 
            //losing function, as with a higher max it would just return the same noise over and over again
            float offsetX = prng.Next(-10000, 10000) + offset.x;
            float offsetY = prng.Next(-10000, 10000) - offset.y;
            octaveOffsets[i] = new Vector2(offsetX, offsetY);
            //Our amplitude is our maxheight
            maxPossibleHeight += amplitude;
            //Times amplitude by persistance to slowly reduce it by a set amount each octave
            amplitude *= persistance;
        }

        //Here we handle the scale-value being 0. If it is, we get a division by 0 error when making our sample-x/y values - Error handling
        if (scale <= 0)
        {
            scale = 0.0001f;
        }
        //This is normalization of values as well
        float maxLocalNoiseHeight = float.MinValue;
        float minLocalNoiseHeight = float.MaxValue;
        //This lets us zoom into the middle of the noisemap when changing the scale, instead of the top right corner - Convinience
        float halfWidth = mapWidth / 2f;
        float halfHeight = mapHeight / 2f;
        //Run as long as our x and y is less than our pre-defined height and width, increment until they're equal
        for (int y = 0; y < mapHeight; y++)
        {
            for (int x = 0; x < mapWidth; x++)
            {
                //We reset these values to one, for a fresh start so to speak
                amplitude = 1;
                frequency = 1;
                float noiseHeight = 0;
                //Run until our i-value is not less than the amount of defined octaves
                for (int i = 0; i < octaves; i++)
                {
                    ///To prevent the landmasses changing shape as we increase/decrease the offset, we don't want it to be affected by the scale and frequency.
                    ///We therefore put them inside the parentheses 
                    ///Usability. We'd like for the map to be 'static' once generated.
                    ///As in, you should be able to go back to the formerly generated masses, by for instance moving backwards from your current point.
                    float sampleX = (x - halfWidth + octaveOffsets[i].x) / scale * frequency;
                    float sampleY = (y - halfHeight + octaveOffsets[i].y) / scale * frequency;

                    ///We are creating noiseHeight, by multiplying perlinvalue with amplitude, for each octave. 
                    //The Mathf.PerlinNoise generates noise in the range of sampleX and sampleY
                    //The reason we multiply by 2 and minus 1 is that mostly, the range generated by perlinnoise is in the range 0-1
                    //We would like it to sometimes be negative, leading to more interesting lookling noise
                    float perlinValue = Mathf.PerlinNoise(sampleX, sampleY) * 2 - 1;
                    noiseHeight += perlinValue * amplitude;

                    //Amplitude and frequency handling for the next octave
                    amplitude *= persistance;
                    frequency *= lacunarity;
                }
                //Here we normalize the values for the next octave/iteration so the values are in the range 0-1.
                if (noiseHeight > maxLocalNoiseHeight)
                {
                    maxLocalNoiseHeight = noiseHeight;
                }
                else if (noiseHeight < minLocalNoiseHeight)
                {
                    minLocalNoiseHeight = noiseHeight;
                }
                //At the very end we 
                noiseMap[x, y] = noiseHeight;
            }
        }
        ///Here we normalize the map-values between 0 & 1
        ///The reason that the seams of our chunks do not line up perfectly,
        ///is because the InverseLerp-method, is run for each chunk,
        ///giving them slightly different values for min-and maxNoiseHeight
        ///The method underneath would still be the preferred way of doing the value-normalisation, if we were not going for an endless-terrain system. 
        ///Because if we generate the entire map at once, then we know exactly what the min and max-values are and we can make certain that they are used. 
        for (int y = 0; y < mapHeight; y++)
        {
            for (int x = 0; x < mapWidth; x++)
            {
                if (normalizeMode == NormalizeMode.Local)
                {
                    noiseMap[x, y] = Mathf.InverseLerp(minLocalNoiseHeight, maxLocalNoiseHeight, noiseMap[x, y]);
                }
                //Clamp sets the value that is returned, between the min and max value specified, in this case 0 and int.MaxValue.
                //normalizedHeight is the value to be clamped. 
                else
                {
                    float normalizedHeight = (noiseMap[x, y] + 1) / (maxPossibleHeight);
                    noiseMap[x, y] = Mathf.Clamp(normalizedHeight, 0, int.MaxValue);
                }

            }
        }
        return noiseMap;
    }
}
